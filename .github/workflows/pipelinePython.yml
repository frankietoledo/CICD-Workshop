# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: pipelinePython

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: read
      
jobs:
  deploy:
    if: false #Job pausado
    runs-on: ubuntu-latest
    steps:
      - name: instalar coso
        run: |
          set -x
          
          sudo mkdir -p --mode=0755 /usr/share/keyrings
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared jammy main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt-get update && sudo apt-get install cloudflared
          
          ls -lha ~/.ssh || $(mkdir ~/.ssh)
          
          echo -e "Host ssh.frankietoledo.com.ar\nProxyCommand /usr/local/bin/cloudflared access ssh -o StrictHostKeyChecking=no --hostname %h" >> ~/.ssh/config
          echo "${{ secrets.PRIVATE_KEY}}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
          
          ls -lha ~/.ssh/
          
          ssh scrollarmy@ssh.frankietoledo.com.ar "docker run srfrankie/node16-java11:1.0.1"
          echo "hola mundo"

  pruebaDuckDns:
    if: true #Job pausado
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Aca lo estoy probando
        run: |
          set -x

          # mkdir ~/.ssh
          ls -lha ~/.ssh
          # echo "${{ secrets.PRIVATE_KEY}}" > ~/.ssh/id_rsa
          
          ssh-add -l 
          # echo "$(cat ~/.ssh/id_rsa)" | rev
          # chmod 600 ~/.ssh/id_rsa

          # ssh-copy-id -f scrollarmy@flisol.duckdns.org
          #ssh -i ~/.ssh/id_rsa -p 5432 -o StrictHostKeyChecking=no  scrollarmy@flisol.duckdns.org "docker run srfrankie/node16-java11:1.0.1"
          
          ssh -p 5432 -o BatchMode=yes StrictHostKeyChecking=no scrollarmy@flisol.duckdns.org "docker run srfrankie/node16-java11:1.0.1"

  pruebaCloudFlare:
    if: false #Job pausado
    runs-on: ubuntu-latest
    steps:
      - name: Install ca-certificates
        run: |
          wget -O Cloudflare_CA.pem https://developers.cloudflare.com/cloudflare-one/static/Cloudflare_CA.pem

          # Install ca-certificates (if not already installed)
          if ! dpkg -l ca-certificates >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y ca-certificates
          fi
          - uses: actions/checkout@v4

          # Convert pem to crt (assuming the downloaded file is pem)
          mv Cloudflare_CA.pem Cloudflare_CA.crt
          
          # Add the certificate to the trust store (using update-ca-certificates instead of dpkg-reconfigure)
          sudo update-ca-certificates
          
          echo "Root certificate installation complete!"

      - uses: Boostport/setup-cloudflare-warp@v1
        name: install cloudflare-warp client and register
        with:
          organization: frankielab
          auth_client_id: 0f4f9e007285ad0f66fcd34dd08d6a54.access
          auth_client_secret: 5cc7722130495c356651120ba85897665242343c2d4232914f98950fc2079f35
      - name: Aca lo estoy probando
        run: |
          set -x
          sudo apt-get update
          sudo apt-get install -y openssh-client
          ls -lha ~/.ssh || $(mkdir ~/.ssh)
          echo "${{ secrets.PRIVATE_KEY}}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
          echo "frMsA7Pg5FWzTJETbVrrwypIE4Yu0am4BNIfDJCaqTM=" > ~/.ssh/sshkey.pub && chmod 600 ~/.ssh/sshkey.pub
          # ping -c 3 192.168.0.7
          # ping -c 3 ssh.frankietoledo.com.ar
          # dig ssh.frankietoledo.com.ar
          ssh -i ~/.ssh/sshkey.pub scrollarmy@192.168.0.7 "docker run srfrankie/node16-java11:1.0.1"


  test:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'opened' &&
      contains(fromJSON('["develop", "main"]'), github.event.pull_request.base.ref)
  # needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest
  tagging:
    if: false #Job pausado
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get latest release version
        id: get_release
        run: |
          set -x
          echo "------------------------"
          release_version=$(curl -s "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | python -c "import sys, json; print(json.load(sys.stdin).get('tag_name', 'v0.0.0'))")
          echo "release_version=$release_version" >> "$GITHUB_OUTPUT"
          echo "::debug::Release version seteado $release_version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate next version
        id: calculate_version
        env:
          release_version: ${{ steps.get_release.outputs.release_version }}
          branch_name: ${{ github.ref }}
        run: |
          set -x
          current_version=$release_version
          echo "::debug:: Current version seteado $current_version"
          echo "::debug:: Branch name $branch_name"
          if [[ "$branch_name" == "refs/heads/main" ]]; then
            echo ":: entramos papa, branch main"
            next_version=$(echo "$current_version" | sed 's/^v//' | awk -F. '{$1 = $1 + 1;} 1' | sed 's/ /./g')
          elif [[ "$branch_name" == "refs/heads/develop" ]]; then
            echo ":: entramos papa, branch develop"
            next_version=$(echo "$current_version" | sed 's/^v//' | awk -F. '{$2 = $2 + 1;} 1' | sed 's/ /./g')
          fi
          echo "::debug::Next version $next_version"
          echo "next_version=$next_version" >> "$GITHUB_OUTPUT"
  build-container:
    if: false
    runs-on: ubuntu-latest
    steps:
    - uses: mr-smithers-excellent/docker-build-push@v6
      name: Build & push Docker image
      with:
        image: martinfargnoli/cicd
        tags: latest
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
